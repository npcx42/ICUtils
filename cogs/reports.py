import discord
from discord.ext import commands
from discord import app_commands
import json
import os
from datetime import datetime

REPORTS_FILE = "data/reports.json"
CONFIG_FILE = "config.json"

class Reports(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.reports = self.load_reports()  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {"reports": [...], "users_agreed": [...], "blocked_users": [...]}
        self.config = self.load_config()

    def load_reports(self):
        if os.path.exists(REPORTS_FILE):
            with open(REPORTS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                if "blocked_users" not in data:
                    data["blocked_users"] = []
                return data
        return {"reports": [], "users_agreed": [], "blocked_users": []}

    def save_reports(self):
        with open(REPORTS_FILE, "w", encoding="utf-8") as f:
            json.dump(self.reports, f, ensure_ascii=False, indent=4)

    def load_config(self):
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}

    def get_next_case_id(self):
        if self.reports["reports"]:
            return max(report["case_id"] for report in self.reports["reports"]) + 1
        return 1

    def has_user_agreed(self, user_id: str):
        return user_id in self.reports["users_agreed"]

    def mark_user_as_agreed(self, user_id: str):
        if user_id not in self.reports["users_agreed"]:
            self.reports["users_agreed"].append(user_id)
            self.save_reports()

    def is_blocked(self, user_id: str):
        return user_id in self.reports["blocked_users"]

    def block_user(self, user_id: str):
        if user_id not in self.reports["blocked_users"]:
            self.reports["blocked_users"].append(user_id)
            self.save_reports()

    def unblock_user(self, user_id: str):
        if user_id in self.reports["blocked_users"]:
            self.reports["blocked_users"].remove(user_id)
            self.save_reports()

    @app_commands.command(name="report", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @app_commands.describe(
        user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
        reason="–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã",
        attachment="–§–∞–π–ª —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)"
    )
    async def report_command(self, interaction: discord.Interaction, user: discord.User, reason: str, attachment: discord.Attachment = None):
        reporter_id = str(interaction.user.id)
        if self.is_blocked(reporter_id):
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã. :middle_finger:", ephemeral=True)
            return

        if not self.has_user_agreed(reporter_id):
            await self.send_first_report_warning(interaction, user, reason, attachment)
        else:
            await self.send_report_confirmation(interaction, user, reason, attachment)

    async def send_first_report_warning(self, interaction: discord.Interaction, user: discord.User, reason: str, attachment: discord.Attachment = None):
        embed = discord.Embed(title="üö® –í–Ω–∏–º–∞–Ω–∏–µ!", color=discord.Color.orange())
        embed.description = (
            "–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π —Ä–µ–ø–æ—Ä—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –∂–∞–ª–æ–±–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—é **–ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä–∞**, "
            "–∞ –Ω–µ –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ –ª–∏—á–Ω–æ–π –Ω–µ–ø—Ä–∏—è–∑–Ω–∏ –∏–ª–∏ –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏—è—Ö.\n\n"
            "‚ö†Ô∏è **–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª—É–∂–∏—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤.**\n\n"
            "–í—ã **—Ç–æ—á–Ω–æ** —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
        )
        view = ConfirmReportView(self.create_report, interaction, user, reason, attachment)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    async def send_report_confirmation(self, interaction: discord.Interaction, user: discord.User, reason: str, attachment: discord.Attachment = None):
        embed = discord.Embed(title="‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!", color=discord.Color.red())
        embed.description = (
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ –ª–æ–∂–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç—ã –±—É–¥—É—Ç —Å—Ç—Ä–æ–≥–æ –Ω–∞–∫–∞–∑—ã–≤–∞—Ç—å—Å—è."
        )
        view = ConfirmReportView(self.create_report, interaction, user, reason, attachment)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    async def create_report(self, interaction: discord.Interaction, user: discord.User, reason: str, attachment: discord.Attachment = None):
        case_id = self.get_next_case_id()
        reporter_id = str(interaction.user.id)
        report_obj = {
            "case_id": case_id,
            "user_id": str(user.id),
            "reported_by": reporter_id,
            "reason": reason,
            "timestamp": datetime.utcnow().isoformat(),
            "attachment": attachment.url if attachment else None,
            "status": "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
            "appealed": False,
            "appeal": None,
            "appeal_status": None
        }
        self.reports["reports"].append(report_obj)
        self.save_reports()

        # Admin channel notification
        admin_channel_id = self.config.get("admin_channel_id")
        if admin_channel_id:
            admin_channel = self.bot.get_channel(admin_channel_id)
            if admin_channel:
                admin_embed = discord.Embed(title=f"–†–µ–ø–æ—Ä—Ç #{case_id}", color=0xFFAB6E)
                admin_embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", inline=True)
                admin_embed.add_field(name="–†–µ–ø–æ—Ä—Ç –æ—Ç", value=interaction.user.mention, inline=True)
                admin_embed.add_field(name="–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=user.mention, inline=True)
                admin_embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
                if attachment:
                    admin_embed.add_field(name="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª", value=attachment.url, inline=False)
                admin_view = ReportResponseView(case_id, self.config, reporter_id, cog=self)
                await admin_channel.send(embed=admin_embed, view=admin_view)
        # –ü–û–ß–ï–ú–£ –¢–£–¢ –î–í–ê –≠–ú–ë–ï–î–ê –°–£–ö–ê!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        # Anonymous channel notification
        anon_channel_id = self.config.get("anonymous_reports_channel_id")
        if anon_channel_id:
            anon_channel = self.bot.get_channel(anon_channel_id)
            if anon_channel:
                anon_embed = discord.Embed(title=f"–†–µ–ø–æ—Ä—Ç #{case_id}", color=0xFFAB6E)
                anon_embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", inline=True)
                anon_embed.add_field(name="–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=user.mention, inline=True)
                anon_embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
                message = await anon_channel.send(embed=anon_embed)
                anon_view = AnonymousReportView(case_id, self.config, reporter_id, cog=self, message=message)
                await message.edit(view=anon_view)

        await interaction.followup.send(f"–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", ephemeral=True)
        self.mark_user_as_agreed(reporter_id)

    @app_commands.command(name="reports", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å–∏ —Ä–µ–ø–æ—Ä—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
    async def reports_command(self, interaction: discord.Interaction, user: discord.User):
        if not self.reports["reports"]:
            await interaction.response.send_message(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–∞ {user.name}.", ephemeral=True)
            return

        user_reports = [report for report in self.reports["reports"] if report["user_id"] == str(user.id)]
        if not user_reports:
            await interaction.response.send_message(f"–ù–µ—Ç —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–∞ {user.name}.", ephemeral=True)
            return

        embed = discord.Embed(title=f"–†–µ–ø–æ—Ä—Ç—ã –Ω–∞ {user.name}", color=discord.Color.blue())
        for report in user_reports:
            embed.add_field(
                name=f"–†–µ–ø–æ—Ä—Ç #{report['case_id']}",
                value=f"–ñ–∞–ª–æ–±–∞ –æ—Ç <@{report['reported_by']}>\n–ü—Ä–∏—á–∏–Ω–∞: {report['reason']}",
                inline=False
            )
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="delete_report", description="–£–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç –ø–æ –Ω–æ–º–µ—Ä—É –∫–µ–π—Å–∞")
    @app_commands.describe(case_id="–ù–æ–º–µ—Ä –∫–µ–π—Å–∞ —Ä–µ–ø–æ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
    async def delete_report(self, interaction: discord.Interaction, case_id: int):
        report = next((r for r in self.reports["reports"] if r["case_id"] == case_id), None)
        if not report:
            await interaction.response.send_message(f"–†–µ–ø–æ—Ä—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∫–µ–π—Å–∞ #{case_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return

        self.reports["reports"].remove(report)
        self.save_reports()
        await interaction.response.send_message(f"–†–µ–ø–æ—Ä—Ç #{case_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", ephemeral=True)

    @app_commands.command(name="banreports", description="–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
    async def banreports(self, interaction: discord.Interaction, user: discord.User):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
            return
        reporter_id = str(user.id)
        if reporter_id in self.reports["blocked_users"]:
            await interaction.response.send_message("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤.", ephemeral=True)
        else:
            self.block_user(reporter_id)
            await interaction.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤.", ephemeral=True)

    @app_commands.command(name="unbanreports", description="–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    @app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
    async def unbanreports(self, interaction: discord.Interaction, user: discord.User):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
            return
        reporter_id = str(user.id)
        if reporter_id not in self.reports["blocked_users"]:
            await interaction.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤.", ephemeral=True)
        else:
            self.unblock_user(reporter_id)
            await interaction.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤.", ephemeral=True)

# View –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞
class ConfirmReportView(discord.ui.View):
    def __init__(self, create_report_callback, interaction, user, reason, attachment: discord.Attachment = None):
        super().__init__(timeout=60)
        self.create_report_callback = create_report_callback
        self.interaction = interaction
        self.user = user
        self.reason = reason
        self.attachment = attachment

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green, emoji="‚úÖ")
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await self.create_report_callback(self.interaction, self.user, self.reason, self.attachment)
        self.stop()

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red, emoji="‚ùå")
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await interaction.followup.send("–†–µ–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.", ephemeral=True)
        self.stop()

# View –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–∞ (–≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª–µ)
class ReportResponseView(discord.ui.View):
    def __init__(self, case_id: int, config: dict, reporter_id: str, *, cog=None):
        super().__init__(timeout=None)
        self.case_id = case_id
        self.config = config
        self.reporter_id = reporter_id
        self.cog = cog

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success, emoji="‚úÖ")
    async def accept_report(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ–ø–æ—Ä—Ç–∞.", ephemeral=True)
            return

        report = next((r for r in self.cog.reports["reports"] if r["case_id"] == self.case_id), None)
        if report:
            report["status"] = "–ü—Ä–∏–Ω—è—Ç–æ"
            self.cog.save_reports()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            anon_channel_id = self.config.get("anonymous_reports_channel_id")
            if anon_channel_id:
                anon_channel = interaction.client.get_channel(anon_channel_id)
                if anon_channel:
                    async for message in anon_channel.history():
                        if message.embeds and str(self.case_id) in message.embeds[0].title:
                            embed = message.embeds[0]
                            embed.set_field_at(0, name="–°—Ç–∞—Ç—É—Å", value="–†–µ–ø–æ—Ä—Ç –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.", inline=True)
                            await message.edit(embed=embed)
                            break

        embed = interaction.message.embeds[0]
        embed.set_field_at(0, name="–°—Ç–∞—Ç—É—Å", value="–ü—Ä–∏–Ω—è—Ç–æ", inline=True)
        await interaction.message.edit(embed=embed, view=None)

        reporter = interaction.client.get_user(int(self.reporter_id))
        if reporter:
            try:
                await reporter.send(f"–í–∞—à —Ä–µ–ø–æ—Ä—Ç #{self.case_id} –±—ã–ª **–ø—Ä–∏–Ω—è—Ç**.")
            except discord.Forbidden:
                pass

        await interaction.response.send_message("–†–µ–ø–æ—Ä—Ç –ø—Ä–∏–Ω—è—Ç.", ephemeral=True)

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="üö´")
    async def reject_report(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–∞.", ephemeral=True)
            return

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        modal = ReportRejectionModal(self.case_id, self.config, self.reporter_id, cog=self.cog)
        await interaction.response.send_modal(modal)

# View –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
class AnonymousReportView(discord.ui.View):
    def __init__(self, case_id: int, config: dict, reporter_id: str, *, cog=None, message=None):
        super().__init__(timeout=None)
        self.case_id = case_id
        self.config = config
        self.reporter_id = reporter_id
        self.cog = cog
        self.message = message  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    @discord.ui.button(label="–û–±–∂–∞–ª–æ–≤–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç", style=discord.ButtonStyle.secondary, emoji="üìù")
    async def appeal(self, interaction: discord.Interaction, button: discord.ui.Button):
        report = next((r for r in self.cog.reports["reports"] if r["case_id"] == self.case_id), None)
        if not report:
            await interaction.response.send_message("–î–∞–Ω–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã.", ephemeral=True)
            return
        if report.get("appealed", False):
            await interaction.response.send_message("–≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω.", ephemeral=True)
            return
        if str(interaction.user.id) != report["reported_by"]:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω –≤–∞–º.", ephemeral=True)
            return

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∞–ø–µ–ª–ª—è—Ü–∏–∏
        modal = AppealReportModal(self.case_id, self.config, self.reporter_id, cog=self.cog, message=self.message)
        await interaction.response.send_modal(modal)

class AppealReportModal(discord.ui.Modal, title="–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞"):
    appeal_text = discord.ui.TextInput(
        label="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        style=discord.TextStyle.paragraph,
        placeholder="–û–ø–∏—à–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Ä–µ–ø–æ—Ä—Ç –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º.",
        required=True,
        max_length=500
    )

    def __init__(self, case_id: int, config: dict, reporter_id: str, *, cog=None, message=None):
        super().__init__()
        self.case_id = case_id
        self.config = config
        self.reporter_id = reporter_id
        self.cog = cog
        self.message = message  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    async def on_submit(self, interaction: discord.Interaction):
        report = next((r for r in self.cog.reports["reports"] if r["case_id"] == self.case_id), None)
        if not report:
            await interaction.response.send_message("–†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return

        report["appealed"] = True
        report["appeal"] = self.appeal_text.value
        report["appeal_status"] = "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
        self.cog.save_reports()

        admin_channel_id = self.config.get("admin_channel_id")
        if admin_channel_id:
            admin_channel = interaction.client.get_channel(admin_channel_id)
            if admin_channel:
                embed = discord.Embed(title=f"–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞ #{self.case_id}", color=0xFFAB6E)
                embed.add_field(name="–°—Ç–∞—Ç—É—Å –∞–ø–µ–ª–ª—è—Ü–∏–∏", value="–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", inline=True)
                embed.add_field(name="–ê–ø–µ–ª–ª—è—Ü–∏—è:", value=self.appeal_text.value, inline=False)
                view = AppealActionView(self.case_id, self.config, self.reporter_id, cog=self.cog)
                await admin_channel.send(embed=embed, view=view)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è —Å—Ç–∞—Ç—É—Å
                anon_channel_id = self.config.get("anonymous_reports_channel_id")
                if anon_channel_id:
                    anon_channel = interaction.client.get_channel(anon_channel_id)
                    if anon_channel:
                        async for message in anon_channel.history():
                            if message.embeds and str(self.case_id) in message.embeds[0].title:
                                embed = message.embeds[0]
                                # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è —Å—Ç–∞—Ç—É—Å
                                embed.add_field(name="–û–±–∂–∞–ª–æ–≤–∞–Ω", value="–î–∞, –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", inline=False)
                                await message.edit(embed=embed, view=None)
                                break

                # –û–±–Ω–æ–≤–ª—è–µ–º embed —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ø–µ–ª–ª—è—Ü–∏–∏
                if self.message and self.message.embeds:
                    embed = self.message.embeds[0]
                    embed.add_field(name="–û–±–∂–∞–ª–æ–≤–∞–Ω", value="–î–∞, –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", inline=False)
                    await self.message.edit(embed=embed, view=None)

                await interaction.response.send_message("–í–∞—à–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", ephemeral=True)
                return

        await interaction.response.send_message("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –¥–ª—è –∞–ø–µ–ª–ª—è—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

class AppealActionView(discord.ui.View):
    def __init__(self, case_id: int, config: dict, reporter_id: str, *, cog=None):
        super().__init__(timeout=None)
        self.case_id = case_id
        self.config = config
        self.reporter_id = reporter_id
        self.cog = cog

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é", style=discord.ButtonStyle.success, emoji="‚úÖ")
    async def accept_appeal(self, interaction: discord.Interaction, button: discord.ui.Button):
        report = next((r for r in self.cog.reports["reports"] if r["case_id"] == self.case_id), None)
        if report:
            report["appeal_status"] = "–ü—Ä–∏–Ω—è—Ç–æ"
            self.cog.save_reports()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            anon_channel_id = self.config.get("anonymous_reports_channel_id")
            if anon_channel_id:
                anon_channel = interaction.client.get_channel(anon_channel_id)
                if anon_channel:
                    async for message in anon_channel.history():
                        if message.embeds and str(self.case_id) in message.embeds[0].title:
                            embed = message.embeds[0]
                            for i, field in enumerate(embed.fields):
                                if field.name == "–û–±–∂–∞–ª–æ–≤–∞–Ω":
                                    embed.set_field_at(i, name="–û–±–∂–∞–ª–æ–≤–∞–Ω", value="–î–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—è–ª–∞ –∞–ø–µ–ª–ª—è—Ü–∏—é.", inline=False)
                                    await message.edit(embed=embed)
                                    break
                            break

        embed = interaction.message.embeds[0]
        embed.set_field_at(0, name="–°—Ç–∞—Ç—É—Å", value="–ü—Ä–∏–Ω—è—Ç–æ", inline=True)
        await interaction.message.edit(embed=embed, view=None)

        reporter = interaction.client.get_user(int(self.reporter_id))
        if reporter:
            try:
                await reporter.send(f"–í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è –ø–æ —Ä–µ–ø–æ—Ä—Ç—É #{self.case_id} –±—ã–ª–∞ **–ø—Ä–∏–Ω—è—Ç–∞**.")
            except discord.Forbidden:
                pass

        await interaction.response.send_message("–ê–ø–µ–ª–ª—è—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞.", ephemeral=True)

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é", style=discord.ButtonStyle.danger, emoji="üö´")
    async def decline_appeal(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = AppealRejectionModal(self.case_id, self.config, self.reporter_id, cog=self.cog)
        await interaction.response.send_modal(modal)

class AppealRejectionModal(discord.ui.Modal, title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–ø–µ–ª–ª—è—Ü–∏–∏"):
    rejection_reason = discord.ui.TextInput(label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞", style=discord.TextStyle.paragraph, required=True)

    def __init__(self, case_id: int, config: dict, reporter_id: str, *, cog=None):
        super().__init__()
        self.case_id = case_id
        self.config = config
        self.reporter_id = reporter_id
        self.cog = cog

    async def on_submit(self, interaction: discord.Interaction):
        report = next((r for r in self.cog.reports["reports"] if r["case_id"] == self.case_id), None)
        if report:
            report["appeal_status"] = "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            report["appeal_rejection_reason"] = self.rejection_reason.value
            self.cog.save_reports()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            anon_channel_id = self.config.get("anonymous_reports_channel_id")
            if anon_channel_id:
                anon_channel = interaction.client.get_channel(anon_channel_id)
                if anon_channel:
                    async for message in anon_channel.history():
                        if message.embeds and str(self.case_id) in message.embeds[0].title:
                            embed = message.embeds[0]
                            for i, field in enumerate(embed.fields):
                                if field.name == "–û–±–∂–∞–ª–æ–≤–∞–Ω":
                                    embed.set_field_at(i, name="–û–±–∂–∞–ª–æ–≤–∞–Ω", value="–î–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∞–ø–µ–ª–ª—è—Ü–∏—é.", inline=False)
                                    await message.edit(embed=embed)
                                    break
                            break

        embed = interaction.message.embeds[0]
        embed.set_field_at(0, name="–°—Ç–∞—Ç—É—Å", value="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", inline=True)
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞", value=self.rejection_reason.value, inline=False)
        await interaction.message.edit(embed=embed, view=None)

        reporter = interaction.client.get_user(int(self.reporter_id))
        if reporter:
            try:
                await reporter.send(
                    f"–í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è –ø–æ —Ä–µ–ø–æ—Ä—Ç—É #{self.case_id} –±—ã–ª–∞ **–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**.\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {self.rejection_reason.value}"
                )
            except discord.Forbidden:
                pass

        await interaction.response.send_message("–ê–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", ephemeral=True)
        
async def setup(bot: commands.Bot):
    await bot.add_cog(Reports(bot))