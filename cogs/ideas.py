import discord
from discord.ext import commands
from discord import app_commands
import json
import os
from typing import Dict, Any
from datetime import datetime
import pytz

IDEAS_FILE = "data/ideas.json"
CONFIG_FILE = "config.json"

class Ideas(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.ideas: Dict[str, Any] = self.load_ideas()
        self.config = self.load_config()
        
    def load_config(self) -> dict:
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def load_ideas(self) -> dict:
        os.makedirs("data", exist_ok=True)
        try:
            with open(IDEAS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def save_ideas(self):
        with open(IDEAS_FILE, "w", encoding="utf-8") as f:
            json.dump(self.ideas, f, ensure_ascii=False, indent=4)

    def calculate_rating(self, votes: Dict[str, int]) -> float:
        if not votes:
            return 0.0
        return round(sum(votes.values()) / len(votes), 1)

    @app_commands.command(name="suggest", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞")
    @app_commands.describe(
        title="–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–¥–µ–∏",
        description="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏"
    )
    async def suggest(self, interaction: discord.Interaction, title: str, description: str):
        suggestions_channel_id = self.config.get("suggestions_channel_id")
        if not suggestions_channel_id:
            await interaction.response.send_message("–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", ephemeral=True)
            return

        channel = self.bot.get_channel(suggestions_channel_id)
        if not channel:
            await interaction.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.", ephemeral=True)
            return

        tz = pytz.timezone('Europe/Chisinau')
        current_time = datetime.now(tz)
        
        embed = discord.Embed(
            title=f"üí° {title}",
            description=description,
            color=0xFFAB6E,
            timestamp=current_time
        )
        embed.set_author(name=interaction.user.display_name, icon_url=interaction.user.display_avatar.url)
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", inline=True)
        embed.add_field(name="–†–µ–π—Ç–∏–Ω–≥", value="0.0 ‚≠ê", inline=True)
        embed.set_footer(text="Made with ‚ù§Ô∏è by npcx42, iconic people and my chinchillas üêÄ")
        
        message = await channel.send(embed=embed)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–¥–µ–µ
        self.ideas[str(message.id)] = {
            "author_id": interaction.user.id,
            "title": title,
            "description": description,
            "timestamp": current_time.isoformat(),
            "votes": {},
            "status": "pending",
            "decision_reason": None
        }
        self.save_ideas()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        view = IdeaView(self)
        await message.edit(view=view)
        
        await interaction.response.send_message("‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", ephemeral=True)

    async def update_idea_message(self, message_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–¥–µ–∏"""
        idea = self.ideas.get(str(message_id))
        if not idea:
            return

        channel = self.bot.get_channel(self.config.get("suggestions_channel_id"))
        if not channel:
            return

        try:
            message = await channel.fetch_message(message_id)
            embed = message.embeds[0]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            rating = self.calculate_rating(idea["votes"])
            for i, field in enumerate(embed.fields):
                if field.name == "–†–µ–π—Ç–∏–Ω–≥":
                    embed.set_field_at(i, name="–†–µ–π—Ç–∏–Ω–≥", value=f"{rating} ‚≠ê", inline=True)

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —É–¥–∞–ª—è–µ–º view
            if idea["status"] != "pending":
                status_emoji = "‚úÖ" if idea["status"] == "accepted" else "‚ùå"
                status_text = "–ü—Ä–∏–Ω—è—Ç–æ" if idea["status"] == "accepted" else "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
                
                for i, field in enumerate(embed.fields):
                    if field.name == "–°—Ç–∞—Ç—É—Å":
                        embed.set_field_at(i, name="–°—Ç–∞—Ç—É—Å", value=f"{status_emoji} {status_text}", inline=True)
                
                if idea["decision_reason"]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
                    reason_exists = any(field.name == "–ü—Ä–∏—á–∏–Ω–∞:" for field in embed.fields)
                    if not reason_exists:
                        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞:", value=idea["decision_reason"], inline=False)
                
                # –£–¥–∞–ª—è–µ–º view –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
                await message.edit(embed=embed, view=None)
            else:
                await message.edit(embed=embed)
            
        except discord.NotFound:
            return

class IdeaView(discord.ui.View):
    def __init__(self, cog: Ideas):
        super().__init__(timeout=None)
        self.cog = cog
        self.add_item(VoteSelect(cog))

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green, emoji="‚úÖ", custom_id="accept_idea")
    async def accept(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–¥–µ–π.", ephemeral=True)
            return
        
        await interaction.response.send_modal(DecisionModal(self.cog, interaction.message, "accepted"))

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red, emoji="‚ùå", custom_id="reject_idea")
    async def reject(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–¥–µ–π.", ephemeral=True)
            return
        
        await interaction.response.send_modal(DecisionModal(self.cog, interaction.message, "rejected"))

class VoteSelect(discord.ui.Select):
    def __init__(self, cog: Ideas):
        options = [
            discord.SelectOption(label=f"{i} –∑–≤–µ–∑–¥", value=str(i), emoji="‚≠ê")
            for i in range(1, 6)
        ]
        super().__init__(
            placeholder="–û—Ü–µ–Ω–∏—Ç–µ –∏–¥–µ—é",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="vote_select"
        )
        self.cog = cog

    async def callback(self, interaction: discord.Interaction):
        idea = self.cog.ideas.get(str(interaction.message.id))
        if not idea:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –∏–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return

        if idea["status"] != "pending":
            await interaction.response.send_message("‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —ç—Ç—É –∏–¥–µ—é –∑–∞–∫—Ä—ã—Ç–æ.", ephemeral=True)
            return

        user_id = str(interaction.user.id)
        if user_id == str(idea["author_id"]):
            await interaction.response.send_message("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–≤–æ—é –∏–¥–µ—é.", ephemeral=True)
            return

        vote = int(self.values[0])
        if user_id in idea["votes"]:
            old_vote = idea["votes"][user_id]
            if old_vote == vote:
                await interaction.response.send_message(f"‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {vote} ‚≠ê —ç—Ç–æ–π –∏–¥–µ–µ.", ephemeral=True)
                return
            
            msg = f"‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {old_vote} ‚≠ê –Ω–∞ {vote} ‚≠ê"
        else:
            msg = f"‚úÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {vote} ‚≠ê —ç—Ç–æ–π –∏–¥–µ–µ"

        idea["votes"][user_id] = vote
        self.cog.save_ideas()
        await self.cog.update_idea_message(interaction.message.id)
        await interaction.response.send_message(msg, ephemeral=True)

class DecisionModal(discord.ui.Modal, title="–†–µ—à–µ–Ω–∏–µ –ø–æ –∏–¥–µ–µ"):
    def __init__(self, cog: Ideas, message: discord.Message, decision: str):
        super().__init__()
        self.cog = cog
        self.message = message
        self.decision = decision
        self.reason = discord.ui.TextInput(
            label="–ü—Ä–∏—á–∏–Ω–∞:",
            style=discord.TextStyle.paragraph,
            placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è...",
            required=True,
            max_length=1000
        )
        self.add_item(self.reason)

    async def on_submit(self, interaction: discord.Interaction):
        idea = self.cog.ideas.get(str(self.message.id))
        if not idea:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –∏–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return

        idea["status"] = self.decision
        idea["decision_reason"] = self.reason.value
        self.cog.save_ideas()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º view
        await self.cog.update_idea_message(self.message.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
        try:
            author = await self.message.guild.fetch_member(idea["author_id"])
            if author:
                status = "–ø—Ä–∏–Ω—è—Ç–∞" if self.decision == "accepted" else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                embed = discord.Embed(
                    title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏",
                    description=f"–í–∞—à–∞ –∏–¥–µ—è ¬´{idea['title']}¬ª –±—ã–ª–∞ {status}!\n–ü—Ä–∏—á–∏–Ω–∞: {self.reason.value}",
                    color=0xFFAB6E,
                    timestamp=datetime.now(pytz.timezone('Europe/Chisinau'))
                )
                embed.set_footer(text="Made with ‚ù§Ô∏è by npcx42, iconic people and my chinchillas üêÄ")
                await author.send(embed=embed)
        except discord.NotFound:
            pass
        
        await interaction.response.send_message("‚úÖ –†–µ—à–µ–Ω–∏–µ –ø–æ –∏–¥–µ–µ –ø—Ä–∏–Ω—è—Ç–æ.", ephemeral=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(Ideas(bot))
